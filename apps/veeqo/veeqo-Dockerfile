# =============================================================================
# Production Dockerfile for Veeqo MCP Server
# Multi-stage build optimized for security and performance
# =============================================================================

# Stage 1: Dependencies and build
FROM node:18-alpine AS builder

# Set working directory
WORKDIR /app

# Install system dependencies for native modules
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    git \
    curl

# Copy package files
COPY package.json package-lock.json ./
COPY tsconfig.json ./

# Install dependencies (including dev dependencies for build)
RUN npm ci --frozen-lockfile --include=dev

# Copy source code
COPY src/ ./src/
COPY tests/ ./tests/

# Build the application
RUN npm run build

# Remove dev dependencies after build
RUN npm prune --production

# =============================================================================
# Stage 2: Production runtime
FROM node:18-alpine AS runtime

# Create non-root user for security
RUN addgroup -g 1001 -S veeqo && \
    adduser -S veeqo -u 1001 -G veeqo

# Install runtime dependencies
RUN apk add --no-cache \
    dumb-init \
    curl \
    ca-certificates \
    tzdata

# Set working directory
WORKDIR /app

# Copy built application from builder stage
COPY --from=builder --chown=veeqo:veeqo /app/dist ./dist
COPY --from=builder --chown=veeqo:veeqo /app/node_modules ./node_modules
COPY --from=builder --chown=veeqo:veeqo /app/package.json ./

# Create necessary directories
RUN mkdir -p /app/logs && \
    chown -R veeqo:veeqo /app/logs && \
    chmod 755 /app/logs

# Switch to non-root user
USER veeqo

# Environment variables
ENV NODE_ENV=production
ENV LOG_LEVEL=info
ENV PORT=3000
ENV WEBHOOK_PORT=3001

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:${PORT}/health || exit 1

# Expose ports
EXPOSE 3000 3001

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start the application
CMD ["node", "dist/index.js"]

# =============================================================================
# Build arguments and labels
# =============================================================================

# Build arguments
ARG BUILD_VERSION=1.0.0
ARG BUILD_DATE
ARG GIT_COMMIT
ARG GIT_BRANCH=main

# Labels for metadata
LABEL org.opencontainers.image.title="Veeqo MCP Server" \
      org.opencontainers.image.description="Production-ready Veeqo MCP Server for inventory and order management" \
      org.opencontainers.image.version="${BUILD_VERSION}" \
      org.opencontainers.image.created="${BUILD_DATE}" \
      org.opencontainers.image.source="https://github.com/mcp-shipping/veeqo-mcp-server" \
      org.opencontainers.image.revision="${GIT_COMMIT}" \
      org.opencontainers.image.vendor="MCP Shipping Suite" \
      org.opencontainers.image.licenses="MIT" \
      org.opencontainers.image.ref.name="${GIT_BRANCH}" \
      org.opencontainers.image.documentation="https://github.com/mcp-shipping/veeqo-mcp-server#readme"

# =============================================================================
# Development Dockerfile (optional)
# =============================================================================

FROM node:18-alpine AS development

# Install system dependencies
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    git \
    curl \
    bash \
    vim

# Create non-root user
RUN addgroup -g 1001 -S veeqo && \
    adduser -S veeqo -u 1001 -G veeqo

# Set working directory
WORKDIR /app

# Copy package files
COPY package.json package-lock.json ./
COPY tsconfig.json ./

# Install all dependencies (including dev)
RUN npm ci --frozen-lockfile

# Create logs directory
RUN mkdir -p /app/logs && \
    chown -R veeqo:veeqo /app && \
    chmod 755 /app/logs

# Switch to non-root user
USER veeqo

# Environment variables for development
ENV NODE_ENV=development
ENV LOG_LEVEL=debug

# Expose ports
EXPOSE 3000 3001

# Start in development mode with hot reload
CMD ["npm", "run", "dev"]

# =============================================================================
# Testing Dockerfile
# =============================================================================

FROM node:18-alpine AS testing

# Install system dependencies
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    git \
    curl

# Set working directory
WORKDIR /app

# Copy package files
COPY package.json package-lock.json ./
COPY tsconfig.json jest.config.js ./

# Install dependencies
RUN npm ci --frozen-lockfile

# Copy source code and tests
COPY src/ ./src/
COPY tests/ ./tests/

# Environment variables for testing
ENV NODE_ENV=test
ENV LOG_LEVEL=error

# Run tests
CMD ["npm", "test"]

# =============================================================================
# Build instructions and examples
# =============================================================================

# Build production image:
# docker build --target runtime -t veeqo-mcp:latest .

# Build with build args:
# docker build \
#   --target runtime \
#   --build-arg BUILD_VERSION=1.2.3 \
#   --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
#   --build-arg GIT_COMMIT=$(git rev-parse HEAD) \
#   --build-arg GIT_BRANCH=$(git branch --show-current) \
#   -t veeqo-mcp:1.2.3 \
#   .

# Build development image:
# docker build --target development -t veeqo-mcp:dev .

# Build testing image:
# docker build --target testing -t veeqo-mcp:test .

# Run production container:
# docker run -d \
#   --name veeqo-mcp \
#   -p 3000:3000 \
#   -p 3001:3001 \
#   -e VEEQO_API_KEY=your_api_key \
#   -e REDIS_URL=redis://redis:6379 \
#   --restart unless-stopped \
#   veeqo-mcp:latest

# Run development container with volume mounting:
# docker run -d \
#   --name veeqo-mcp-dev \
#   -p 3000:3000 \
#   -p 3001:3001 \
#   -v $(pwd):/app \
#   -v /app/node_modules \
#   -e VEEQO_API_KEY=your_test_api_key \
#   veeqo-mcp:dev

# =============================================================================
# Security considerations
# =============================================================================

# 1. Non-root user: Container runs as non-privileged user 'veeqo'
# 2. Minimal base image: Uses Alpine Linux for smaller attack surface
# 3. Multi-stage build: Production image doesn't include build tools
# 4. Health checks: Built-in health monitoring
# 5. Signal handling: Uses dumb-init for proper signal forwarding
# 6. Read-only filesystem: Can be run with --read-only flag
# 7. Resource limits: Set appropriate CPU and memory limits in production
# 8. Network security: Only exposes necessary ports
# 9. Dependency scanning: Use tools like Snyk to scan for vulnerabilities
# 10. Regular updates: Keep base image and dependencies updated

# Production deployment example with security hardening:
# docker run -d \
#   --name veeqo-mcp \
#   --user 1001:1001 \
#   --read-only \
#   --tmpfs /tmp:rw,noexec,nosuid,size=100m \
#   --tmpfs /app/logs:rw,noexec,nosuid,size=500m \
#   --cap-drop=ALL \
#   --security-opt=no-new-privileges:true \
#   -p 3000:3000 \
#   -p 3001:3001 \
#   -e VEEQO_API_KEY=your_api_key \
#   --memory=512m \
#   --cpus=0.5 \
#   --restart unless-stopped \
#   veeqo-mcp:latest

# =============================================================================
# Optimization notes
# =============================================================================

# 1. Layer caching: Dependencies are copied before source code for better caching
# 2. Production pruning: Dev dependencies removed after build
# 3. Alpine base: Smaller image size and security benefits
# 4. Multi-stage build: Separates build and runtime environments
# 5. Health checks: Enables container orchestration health monitoring
# 6. Signal handling: Proper graceful shutdown handling
# 7. File permissions: Correct ownership for security
# 8. Environment-specific builds: Different targets for different use cases