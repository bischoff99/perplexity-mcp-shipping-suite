version: '3.8'

# =============================================================================
# Veeqo MCP Server Docker Compose Configuration
# Complete development and production environment setup
# =============================================================================

services:
  # =============================================================================
  # Veeqo MCP Server - Main Application
  # =============================================================================
  veeqo-mcp:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
      args:
        BUILD_VERSION: ${BUILD_VERSION:-1.0.0}
        BUILD_DATE: ${BUILD_DATE}
        GIT_COMMIT: ${GIT_COMMIT}
        GIT_BRANCH: ${GIT_BRANCH:-main}
    container_name: veeqo-mcp-server
    restart: unless-stopped
    ports:
      - "${PORT:-3000}:3000"           # HTTP server (health checks, metrics)
      - "${WEBHOOK_PORT:-3001}:3001"   # Webhook server
    environment:
      # Core configuration
      - NODE_ENV=${NODE_ENV:-production}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - PORT=3000
      - WEBHOOK_PORT=3001
      
      # Veeqo API configuration
      - VEEQO_API_KEY=${VEEQO_API_KEY}
      - VEEQO_API_URL=${VEEQO_API_URL:-https://api.veeqo.com}
      - VEEQO_TIMEOUT=${VEEQO_TIMEOUT:-30000}
      - VEEQO_RETRY_ATTEMPTS=${VEEQO_RETRY_ATTEMPTS:-3}
      
      # Caching configuration
      - ENABLE_CACHE=${ENABLE_CACHE:-true}
      - REDIS_URL=redis://redis:6379
      
      # Webhook configuration
      - ENABLE_WEBHOOKS=${ENABLE_WEBHOOKS:-true}
      - WEBHOOK_SECRET=${WEBHOOK_SECRET}
      
      # Performance settings
      - MAX_CONCURRENT_REQUESTS=${MAX_CONCURRENT_REQUESTS:-100}
      - RATE_LIMIT_PER_MINUTE=${RATE_LIMIT_PER_MINUTE:-300}
      
      # Security settings
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-*}
      - MAX_REQUEST_BODY_SIZE=${MAX_REQUEST_BODY_SIZE:-10485760}
    volumes:
      - ./logs:/app/logs:rw                    # Log files
      - ./data:/app/data:rw                    # Application data
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - veeqo-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # =============================================================================
  # Redis Cache Server
  # =============================================================================
  redis:
    image: redis:7.2-alpine
    container_name: veeqo-mcp-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: 
      - redis-server
      - --appendonly yes
      - --requirepass ${REDIS_PASSWORD:-}
      - --maxmemory 256mb
      - --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - veeqo-network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  # =============================================================================
  # Monitoring Stack (Optional)
  # =============================================================================
  
  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: veeqo-mcp-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - veeqo-network
    profiles:
      - monitoring
    depends_on:
      - veeqo-mcp
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.1'
          memory: 256M

  # Grafana for visualization
  grafana:
    image: grafana/grafana:10.0.0
    container_name: veeqo-mcp-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - veeqo-network
    profiles:
      - monitoring
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  # =============================================================================
  # Database (Optional - for storing webhook events and logs)
  # =============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: veeqo-mcp-postgres
    restart: unless-stopped
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-veeqo_mcp}
      - POSTGRES_USER=${POSTGRES_USER:-veeqo}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-veeqo123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
    networks:
      - veeqo-network
    profiles:
      - database
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-veeqo}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 256M

  # =============================================================================
  # Nginx Reverse Proxy (Optional - for production deployment)
  # =============================================================================
  nginx:
    image: nginx:1.25-alpine
    container_name: veeqo-mcp-nginx
    restart: unless-stopped
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - veeqo-network
    profiles:
      - production
    depends_on:
      - veeqo-mcp
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M

# =============================================================================
# Networks
# =============================================================================
networks:
  veeqo-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

# =============================================================================
# Volumes
# =============================================================================
volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  postgres_data:
    driver: local
  nginx_logs:
    driver: local

# =============================================================================
# Configuration Examples and Usage
# =============================================================================

# Start basic services (app + redis):
# docker-compose up -d

# Start with monitoring:
# docker-compose --profile monitoring up -d

# Start with database:
# docker-compose --profile database up -d

# Start full production stack:
# docker-compose --profile monitoring --profile database --profile production up -d

# Development environment:
# docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d

# View logs:
# docker-compose logs -f veeqo-mcp

# Scale the application:
# docker-compose up -d --scale veeqo-mcp=3

# Stop all services:
# docker-compose down

# Stop and remove volumes:
# docker-compose down -v

# =============================================================================
# Environment-Specific Overrides
# =============================================================================

# Create docker-compose.override.yml for local development:
# version: '3.8'
# services:
#   veeqo-mcp:
#     build:
#       target: development
#     environment:
#       - NODE_ENV=development
#       - LOG_LEVEL=debug
#       - ENABLE_DEV_MODE=true
#     volumes:
#       - .:/app
#       - /app/node_modules
#     command: npm run dev

# Create docker-compose.prod.yml for production:
# version: '3.8'
# services:
#   veeqo-mcp:
#     deploy:
#       replicas: 3
#       update_config:
#         parallelism: 1
#         delay: 10s
#       restart_policy:
#         condition: on-failure

# =============================================================================
# Health Check Configuration
# =============================================================================

# All services include health checks for proper container orchestration:
# - Application: HTTP health endpoint
# - Redis: Redis ping command
# - PostgreSQL: pg_isready check
# - Prometheus: HTTP metrics endpoint
# - Nginx: HTTP status check

# =============================================================================
# Resource Management
# =============================================================================

# Resource limits and reservations are configured for:
# - Optimal performance under normal load
# - Protection against resource exhaustion
# - Horizontal scaling capabilities
# - Production-grade reliability

# =============================================================================
# Security Configuration
# =============================================================================

# Security features:
# - Non-root containers
# - Resource limits
# - Network isolation
# - Environment variable-based secrets
# - Health monitoring
# - Log aggregation
# - SSL/TLS ready (with nginx profile)

# =============================================================================
# Monitoring and Observability
# =============================================================================

# Monitoring stack includes:
# - Prometheus for metrics collection
# - Grafana for visualization and alerting
# - Structured logs aggregation
# - Performance monitoring
# - Error tracking and alerting
# - Business metrics dashboard

# =============================================================================
# Backup and Recovery
# =============================================================================

# Data persistence:
# - Redis data in named volume
# - PostgreSQL data in named volume
# - Application logs in mounted directory
# - Grafana dashboards in named volume
# - Nginx logs in named volume

# Backup strategy:
# docker-compose exec postgres pg_dump -U veeqo veeqo_mcp > backup.sql
# docker-compose exec redis redis-cli --rdb /data/dump.rdb

# =============================================================================
# Troubleshooting
# =============================================================================

# Common commands:
# docker-compose ps                    # Check service status
# docker-compose logs veeqo-mcp       # View application logs
# docker-compose exec veeqo-mcp sh    # Shell into container
# docker-compose restart veeqo-mcp    # Restart application
# docker stats                        # Monitor resource usage

# Debug networking:
# docker-compose exec veeqo-mcp nslookup redis
# docker-compose exec veeqo-mcp ping redis

# Check health:
# docker-compose exec veeqo-mcp curl http://localhost:3000/health
# docker-compose exec redis redis-cli ping