{
  "MCP Tool Handler": {
    "prefix": "mcp-handler",
    "body": [
      "async handle${1:ToolName}(args: any): Promise<any> {",
      "  try {",
      "    // Validate input using Zod schema",
      "    const validated = ${2:schemaName}.parse(args);",
      "    ",
      "    // Log the operation",
      "    this.logger.info('${3:Operation description}', { ",
      "      tool: '${4:tool_name}',",
      "      requestId: validated.requestId || 'unknown'",
      "    });",
      "    ",
      "    // Perform the operation",
      "    const result = await this.${5:serviceName}.${6:methodName}(validated);",
      "    ",
      "    return {",
      "      content: [{",
      "        type: 'text',",
      "        text: JSON.stringify(result, null, 2)",
      "      }]",
      "    };",
      "  } catch (error) {",
      "    this.logger.error('${7:Error description}', { error: error.message });",
      "    throw new Error(`${8:Error message}: ${error.message}`);",
      "  }",
      "}"
    ],
    "description": "MCP tool handler with proper error handling and logging"
  },
  "API Service Method": {
    "prefix": "api-service",
    "body": [
      "async ${1:methodName}(${2:params}): Promise<${3:ReturnType}> {",
      "  try {",
      "    const response = await this.rateLimiter.schedule(() =>",
      "      this.httpClient.${4:httpMethod}(`${5:endpoint}`, {",
      "        ${6:requestOptions}",
      "      })",
      "    );",
      "    ",
      "    // Validate response",
      "    const validated = ${7:responseSchema}.parse(response.data);",
      "    ",
      "    this.logger.debug('${8:Operation} completed successfully', {",
      "      endpoint: '${5:endpoint}',",
      "      statusCode: response.status",
      "    });",
      "    ",
      "    return validated;",
      "  } catch (error) {",
      "    this.logger.error('${9:Operation} failed', { ",
      "      error: error.message,",
      "      endpoint: '${5:endpoint}'",
      "    });",
      "    ",
      "    if (error.response?.status === 429) {",
      "      throw new Error('Rate limit exceeded');",
      "    }",
      "    ",
      "    throw new Error(`${10:Error prefix}: ${error.message}`);",
      "  }",
      "}"
    ],
    "description": "API service method with rate limiting and error handling"
  },
  "Zod Schema": {
    "prefix": "zod-schema",
    "body": [
      "const ${1:schemaName} = z.object({",
      "  ${2:fieldName}: z.string().min(1, '${3:Field} is required'),",
      "  ${4:optionalField}: z.string().optional(),",
      "  ${5:numberField}: z.number().positive('${6:Field} must be positive'),",
      "  ${7:emailField}: z.string().email('Invalid email format'),",
      "  ${8:enumField}: z.enum(['${9:value1}', '${10:value2}']),",
      "}).strict();"
    ],
    "description": "Zod validation schema with common field types"
  },
  "Jest Test Suite": {
    "prefix": "jest-test",
    "body": [
      "describe('${1:TestSuite}', () => {",
      "  let ${2:instanceName}: ${3:ClassName};",
      "  ",
      "  beforeEach(() => {",
      "    ${2:instanceName} = new ${3:ClassName}(${4:constructorArgs});",
      "  });",
      "  ",
      "  afterEach(() => {",
      "    jest.clearAllMocks();",
      "  });",
      "  ",
      "  describe('${5:methodName}', () => {",
      "    it('should ${6:expectedBehavior}', async () => {",
      "      // Arrange",
      "      const ${7:input} = ${8:testData};",
      "      ",
      "      // Act", 
      "      const result = await ${2:instanceName}.${5:methodName}(${7:input});",
      "      ",
      "      // Assert",
      "      expect(result).toEqual(${9:expectedResult});",
      "    });",
      "    ",
      "    it('should handle errors when ${10:errorCondition}', async () => {",
      "      // Arrange",
      "      const ${11:invalidInput} = ${12:invalidData};",
      "      ",
      "      // Act & Assert",
      "      await expect(${2:instanceName}.${5:methodName}(${11:invalidInput}))",
      "        .rejects.toThrow('${13:expectedError}');",
      "    });",
      "  });",
      "});"
    ],
    "description": "Jest test suite with setup and basic test cases"
  },
  "MCP Tool Definition": {
    "prefix": "mcp-tool-def",
    "body": [
      "{",
      "  name: '${1:tool_name}',",
      "  description: '${2:Tool description}',",
      "  inputSchema: {",
      "    type: 'object',",
      "    properties: {",
      "      ${3:property_name}: {",
      "        type: '${4:string}',",
      "        description: '${5:Property description}'",
      "      }",
      "    },",
      "    required: ['${6:required_properties}']",
      "  }",
      "}"
    ],
    "description": "MCP tool definition with input schema"
  }
}